@using Licenta_Ecommerce_Mongo.DBConnections;
@using Licenta_Ecommerce_Mongo.Data;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MongoDBWrapper mongo;
@inject NavigationManager nav

<MudCard Class="border-solid my-2 border-2 mud-border- " Style="width: 800px" Outlined="true">
    <MudGrid Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper>
                <MudImage Class="mx-2 my-2" Src="@product.ImageBase64" Height="100" Width="100" />
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem Class="col-6" Style="height: auto; width: 400px" >
                    <MudText Class="mt-2" Typo="Typo.h5">@product.Name</MudText>
                </MudItem>
                <MudItem Class="d-flex align-center" Style="height:min-content; width: 150px">
                    <MudIconButton Icon="@Icons.Material.Filled.HorizontalRule" @onclick=OnChangeQuantity Style="@($"color:{Colors.Shades.Black};")" Class="mt-4"  />
                    <MudText Class="mt-4">@quantity</MudText>
                    <MudIconButton Class="mt-4" Icon="@Icons.Material.Filled.Add" @onclick=AddQuantity Style="@($"color:{Colors.Shades.Black};")" />
                </MudItem>
                <MudItem Class="d-flex align-center" Style="height: auto; width: 130px">
                    <MudText Class="mt-4" Typo="Typo.h6">@priceQuantity lei </MudText>
                </MudItem>
            </MudGrid>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem Class="d-flex align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Style="@($"color:{Colors.Red.Default};")" Class="mx-1" @onclick="AddItemToFavorites" />
                    <MudButton Size="Size.Small" Variant="Variant.Filled" Style="@($"color:{Colors.Shades.White}; background:{Colors.Cyan.Darken3};")" @onclick="RemoveFromUserCart">Remove from cart</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudCard>

@code {
    [Parameter]
    public Product product { get; set; } = new();
    public int priceQuantity = 0;
    int quantity = 0;
    string userId = "";
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.Identity!.Name!;
        
        quantity = await mongo.GetQuantityForProduct(userId, product.Id);
        priceQuantity = product.Price * quantity;
    }
    public async void OnChangeQuantity()
    {
        quantity--;
        if (product.Quantity<0)
        {
            product.Quantity = 0;
        }
        priceQuantity = product.Price * quantity;
        await mongo.UpdateProductQuantiry(userId,product.Id, quantity);
        nav.NavigateTo("/checkOut", true);
    }
    public async void AddQuantity()
    {
        quantity++;
        priceQuantity = product.Price * quantity;
        await mongo.UpdateProductQuantiry(userId,product.Id, quantity);
        nav.NavigateTo("/checkOut", true);
    }
    public void RemoveFromUserCart()
    {
        mongo.RemoveProductFromUserCart(userId, product.Id);
        nav.NavigateTo("/checkOut", true);
    }
    public async void AddItemToFavorites()
    {
        await mongo.AddItemToFavorites(userId, product.Id);
    }
}