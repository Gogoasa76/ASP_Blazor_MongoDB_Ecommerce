@using Licenta_Ecommerce_Mongo.DBConnections;
@using Licenta_Ecommerce_Mongo.Data;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MongoDBWrapper mongo;
@inject NavigationManager nav

<MudCard Class="border-solid my-2 border-2 mud-border- " Style="width: 800px" Outlined="true">
    <MudGrid Justify="Justify.FlexStart">
        <MudItem>
            <MudPaper>
                <MudImage Class="mx-2 my-2" Src="@product.ImageBase64" Height="100" Width="100" />
            </MudPaper>
        </MudItem>
        <MudItem>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem Class="col-6" Style="height: auto; width: 400px">
                    <MudText Typo="Typo.h5">@product.Name</MudText>
                </MudItem>
                <MudItem Class="d-flex align-center" Style="height:min-content; width: 150px">
                    <MudText Class="mt-6">x @quantity buc</MudText>
                </MudItem>
                <MudItem Class="d-flex align-center" Style="height: auto; width: 130px">
                    <MudText Typo="Typo.h6">@priceQuantity lei </MudText>
                </MudItem>
            </MudGrid>
            <MudGrid Justify="Justify.FlexStart">
                <MudItem Class="d-flex align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Style="@($"color:{Colors.Red.Accent4};")" Class="mx-1" @onclick="AddItemToFavorites" />
                    <MudButton Size="Size.Small" Variant="Variant.Filled" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.Teal.Darken1};")" @onclick="RemoveFromUserCart">Remove from cart</MudButton>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudCard>

@code {
    [Parameter]
    public Product product { get; set; } = new();
    public int priceQuantity = 0;
    int quantity = 0;
    string userId = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.Identity!.Name!;

        quantity = await mongo.GetQuantityForProduct(userId, product.Id);
        priceQuantity = product.Price * quantity;
    }
    public void RemoveFromUserCart()
    {
        mongo.RemoveProductFromUserCart(userId, product.Id);
        nav.NavigateTo("/cart", true);
    }
    public async void AddItemToFavorites()
    {
        await mongo.AddItemToFavorites(userId, product.Id);
    }
}