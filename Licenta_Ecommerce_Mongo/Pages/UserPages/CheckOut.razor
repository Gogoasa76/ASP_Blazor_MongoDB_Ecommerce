@page "/checkOut"
@using System.Text.RegularExpressions;
@using System.ComponentModel.DataAnnotations;
@using Licenta_Ecommerce_Mongo.DBConnections;
@using Licenta_Ecommerce_Mongo.Data;
@using Licenta_Ecommerce_Mongo.Shared.Components

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MongoDBWrapper mongo;

<MudMainContent Class="mx-16">
    <MudGrid Class="justify-center">
        <MudItem xs="5">
            <MudPaper Style="width: 100%">
                <MudForm Class="row g-6 mx-auto" Style="width:90%" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                    <MudText Class="col-sm-6" Typo="Typo.h6">First name</MudText>
                    <MudText Class="col-sm-6" Typo="Typo.h6">Last name</MudText>
                    <MudTextField Class="col-sm-6 pr-3 pb-1" T="string" @bind-Value="TextValue1" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Label="First name" RequiredError="First name is requiered!" />
                    <MudTextField Class="col-sm-6 pl-3 pb-1" T="string" @bind-Value="TextValue2" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Label="Last name" RequiredError="Last name is required!" />
                    <MudText Class="col-12" Typo="Typo.h6">Telephone number</MudText>
                    <MudTextField Class="col-12 pb-1" T="string" @bind-Value="TextValue3" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Label="Telephone number " RequiredError="num is required!" />
                    <MudText Class="col-12" Typo="Typo.h6">Email</MudText>
                    <MudTextField Class="col-12 pb-1" T="string" @bind-Value="TextValue4" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Label="Email" RequiredError="Email is required!" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                    <MudText Class="col-12" Typo="Typo.h6">Region</MudText>
                    <MudTextField Class="col-12 pb-1" T="string" @bind-Value="TextValue5" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Label="Region" RequiredError="Region is required!" />
                    <MudText Class="col-12" Typo="Typo.h6">Adress</MudText>
                    <MudTextField Class="col-12 pb-1" T="string" @bind-Value="TextValue6" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true" Label="Adress " RequiredError="Adress is required!" />
                </MudForm>
                <MudRadioGroup @bind-SelectedOption="@SelectedOption" Class="pl-8 mt-8">
                    <MudText Class="" Typo="Typo.h6">Payment type</MudText>
                    <MudRadio Class="col-12" Option="@("Radio 1")" Color="Color.Error" >Ramburs</MudRadio>
                    <MudRadio Class="col-12" Option="@("Radio 2")" Color="Color.Error">Online with bancking card</MudRadio>
                </MudRadioGroup>
                <MudPaper Class="pa-4 mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Continue to checkout</MudButton>
                </MudPaper>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Style="width: 100%">
                <MudForm Class="row g-6 mx-auto" Style="width:95%" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                    <MudText Class="col-6" Typo="Typo.h6">Your cart</MudText>
                    <MudGrid>
                        <MudPaper>
                            @if (products.Count == 0)
                            {
                                <h1 class="text-center">The Cart is empty</h1>
                            }
                            else
                            {

                                foreach (Product product in products)
                                {
                                    <MudItem>
                                        <CartCard product="product" />
                                    </MudItem>
                                }
                            }
                        </MudPaper>

                        <MudText> @total Lei</MudText>

                        <MudButton @onclick="SendOrder">Send order</MudButton>
                    </MudGrid>
                </MudForm>   
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudMainContent>

@code {
    bool success;
    string[] errors = { };

    public string TextValue1 { get; set; } = string.Empty;
    public string TextValue2 { get; set; } = string.Empty;
    public string TextValue3 { get; set; } = string.Empty;
    public string TextValue4 { get; set; } = string.Empty;
    public string TextValue5 { get; set; } = string.Empty;
    public string TextValue6 { get; set; } = string.Empty;
    public string SelectedOption { get; set; } = string.Empty;

    public List<Product> products { get; set; } = new();
    public int total { get; set; } = 0;
    string userId = "";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.Identity!.Name!;
        try
        {
            products = await mongo.GetCartByUserId(userId);
        }
        catch (Exception)
        {
            //nu foarte important
        }
        CalculateTotal();

    }
    public void SendOrder()
    {

    }

    public async void CalculateTotal()
    {
        foreach (Product product in products)
        {
            int quantity = await mongo.GetQuantityForProduct(userId, product.Id);
            total += product.Price * quantity;
            Console.WriteLine(total);

        }
        await InvokeAsync(StateHasChanged);
    }
}
