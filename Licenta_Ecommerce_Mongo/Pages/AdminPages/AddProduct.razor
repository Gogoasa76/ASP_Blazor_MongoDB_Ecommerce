@page "/addProduct"
@using Licenta_Ecommerce_Mongo.DBConnections;
@using Licenta_Ecommerce_Mongo.Data;
@inject MongoDBWrapper mongo
@inject NavigationManager nav

<MudContainer>
    <MudList>
        <MudItem Class="my-4">
            <MudText>Product name</MudText>
            <input class="form-control" @bind="product.Name" type="text" />
        </MudItem>
        <MudItem Class="my-4">
            <MudText>Description</MudText>
            <input class="form-control" @bind="product.Description" type="text" />
        </MudItem>
                <MudItem Class="my-4">
            <MudText>Price</MudText>
            <input class="form-control"  @bind="product.Price" type="number" />
        </MudItem>
        <MudItem Class="my-4">
            <MudText>Tags</MudText>
            <MudText Color="Color.Error">tag separatioin by "," example: tag1,tag2</MudText>    
            <input class="form-control" @bind="tagsAsString" type="text" />
        </MudItem>
        <MudItem>
            <MudText>Image</MudText>
            <label class="form-label" for="title">
                <InputFile OnChange="@OnChange" multiple></InputFile>
            </label>
        </MudItem>
        <MudButton @onclick="SubmitItem" Class="mr-4 my-3" Style="@($"color:{Colors.Shades.White}; background:{Colors.Cyan.Darken3};")">Add Product</MudButton>
    </MudList>
</MudContainer>

@code{
    Product product = new();

    string tagsAsString = string.Empty;

    private async void SubmitItem()
    {
        product.Tags = tagsAsString.ToLower().Split(",").ToList();
        await mongo.AddItem(product);
        nav.NavigateTo("/addProduct",true);
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        string format = "image/jpeg";
        long maxSize = 512000000;

        foreach (IBrowserFile file in e.GetMultipleFiles())
        {
            if (string.Equals(file.ContentType, format, StringComparison.OrdinalIgnoreCase))
            {
                IBrowserFile image = await file.RequestImageFileAsync(format, 1000, 1000);
                byte[] buffer = new byte[image.Size];

                await image.OpenReadStream(maxAllowedSize: maxSize).ReadAsync(buffer);
                product.ImageBase64 = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            }
        }
    }
}