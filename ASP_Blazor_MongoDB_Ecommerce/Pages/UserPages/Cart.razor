@page "/cart"
@using ASP_Blazor_MongoDB_Ecommerce.DBConnections;
@using ASP_Blazor_MongoDB_Ecommerce.Data;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MongoDBWrapper mongo;
@inject NavigationManager navManager
@using ASP_Blazor_MongoDB_Ecommerce.Shared.Components

<MudLayout Class="d-flex justify-center flex-grow-1 gap-4">
	<AuthorizeView>
		<NotAuthorized>
			<h3 class="text-center">Please login to use the cart</h3>
		</NotAuthorized>
		<Authorized>
			<MudList >
				<MudItem>
					@if (products.Count == 0)
					{
						<h1 class="text-center">The Cart is empty</h1>
					}
					else
					{
						foreach(Product product in products)
						{
							<MudItem>
								<CartCard product="product"/>
							</MudItem>
						}
					}
					<MudText Typo="Typo.h5">Price: @total Lei</MudText>
					<MudButton Class="col-6" Variant="Variant.Filled" Style="@($"color:{Colors.Shades.White}; background:{Colors.Cyan.Darken3};")" @onclick="SendOrder">Send Order</MudButton>
				</MudItem>
			</MudList>
		</Authorized>
	</AuthorizeView>
</MudLayout>

@code {
	public List<Product> products { get; set; } = new();
	public int total { get; set; } = 0;
	string userId = "";
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		userId = user.Identity!.Name!;
		try
		{
			products = await mongo.GetCartByUserId(userId);
		}
		catch (Exception)
		{
			//nu foarte important
		}
		CalculateTotal();
		
	}
	public void SendOrder()
	{
		navManager.NavigateTo("/checkout", true);
	}

	public async void CalculateTotal()
	{
		foreach(Product product in products)
		{
			int quantity = await mongo.GetQuantityForProduct(userId, product.Id);
			total += product.Price * quantity;
			
		}
		await InvokeAsync(StateHasChanged);
	}
}