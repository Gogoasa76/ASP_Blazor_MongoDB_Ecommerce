@page "/login"

@using ASP_Blazor_MongoDB_Ecommerce.Authentication;
@using ASP_Blazor_MongoDB_Ecommerce.DBConnections;
@using ASP_Blazor_MongoDB_Ecommerce.Data;
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject MongoDBWrapper mongo

<div class="row mt-16">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="username" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    string username = "admin";
    string password = "1234";

    //string username = string.Empty;
   // string password = string.Empty;
    private async Task Authenticate()
    {
        UserAccount user;
        password = Hashing.GetHash(password);

        user = await mongo.CheckUser(username, password);
        
        password = string.Empty;
        username = string.Empty;

        if (user.UserName == null || user.UserName == "")
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }  
        var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = user.UserName,
                Role=user.Role,
                ID = user.Id
            });
        navManager.NavigateTo("/", true);
    }
}